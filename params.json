{"name":"Graml","tagline":"Library to represent Tinkerpop graphs as YAML","body":"# YAML for Graphs = Graml\r\n[![License](http://img.shields.io/badge/license-APACHE-blue.svg?style=flat)](http://choosealicense.com/licenses/apache-2.0/)\r\n[![Build Status](https://travis-ci.org/segfly/graml.svg)](https://travis-ci.org/segfly/graml)\r\n\r\n### About\r\nGraml is a lightweight graph mark-up language based on [YAML](http://en.wikipedia.org/wiki/YAML).\r\nIt is designed to represent human-readable graphs more compactly than alternatives such as JSON (GraphSON) or XML (GraphML).\r\n\r\n#### Features:\r\n* YAML-based graph representations\r\n* Java reference implementation\r\n* [Tinkerpop Blueprints](http://blueprints.tinkerpop.com/) support for [OrientDB](https://github.com/orientechnologies/orientdb)\r\n[Neo4j](https://github.com/neo4j/neo4j)\r\n[MongoDB](https://github.com/mongodb/mongo) and more!\r\n\r\n#### Roadmap:\r\n* Customizable section names\r\n* Graph serialization to Graml\r\n* DB class creation\r\n* Stream processing\r\n\r\n## Usage\r\nTo enable Graml in your project, simply declare the dependency:\r\n\r\nGradle:\r\n\r\n```groovy\r\ncompile 'com.segfly.graml:graml:1.0.0'\r\n```\r\n\r\nMaven:\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.segfly.graml</groupId>\r\n  <artifactId>graml</artifactId>\r\n  <version>1.0.0</version>\r\n</dependency>\r\n```\r\n\r\n## Quickstart\r\n\r\nGraml requires a specific data structure and can not read arbitrary YAML.\r\nGiven a Graml-compliant file, getting started is simple:\r\n\r\n```java\r\nTinkerGraph g = new TinkerGraph();\r\nGramlReader graml = new GramlReader(g);\r\ngraml.load(new File (\"/path/to/file.yaml\"));\r\n```\r\n\r\nUsing an empty in-memory [TinkerGraph](https://github.com/tinkerpop/blueprints/wiki/TinkerGraph) we construct a `GramlReader`.\r\nWe then can load any number of Graml-formatted YAML representations.\r\n\r\n### Example Graml\r\nGraml has an intuitive structure and syntax.\r\nYAML's inline lists (via [ ] ) and associative-lists (via { } ) allow simple one to many relationships on a single line.\r\n\r\n```yaml\r\ngraml: {version: 1.0}\r\n\r\ngraph:\r\n  apple: {growsOn: tree}\r\n  tree: {dependsOn: water, exhale: O2}\r\n  water: {precipitatesAs: [rain, snow, sleet, hail]}\r\n```\r\n\r\n## Graml Basics\r\nGraml contains five main sections:\r\n\r\nSection   | Required | Purpose\r\n----------|----------|--------\r\nheader    | Yes      | Metadata\r\nclassmap  | No       | Object-oriented DB support\r\ngraph     | Yes      | Graph relationships\r\nvertices  | No       | Vertex properties\r\nedges     | No       | Edge properties\r\n\r\n### Header\r\nThe _required_ header must be present:\r\n```yaml\r\ngraml: {version: 1.0}\r\n```\r\n\r\n### Classmap\r\nThe _optional_ classmap section supports object-oriented databases such as OrientDB.\r\nWhen resolving a vertex or edge, an entity's class is determined by this section.\r\n\r\n```yaml\r\nclassmap:\r\n  fruit: [apples, oranges, pears]\r\n  plant: tree\r\n  verb: growsOn\r\n```\r\n\r\nAnother way to think of this is in terms of how it affects names of entities sent to the Blueprints API. Consider the following graph with the above classmap example:\r\n \r\n```yaml\r\ngraph:\r\n  apple: {growsOn: tree}\r\n```\r\n\r\nThis will result in two vertices with the names \"fruit:apples\" and \"plant:tree\" and an edge \"verb:growOn\".\r\nAn underlying implementation like OrientDB will use the prefix to map the entity to a class within the database.\r\nThe Graml reference implementation will not create the classes.\r\nFuture versions may address this shortcoming. \r\n\r\n### Graph Definition\r\nThe _required_ graph section captures relationships between vertices.\r\nThe most simple expression is a nested associative array representing vertex-edge-vertex:\r\n\r\n```yaml\r\ngraph:\r\n   parent: {edge: child}\r\n```\r\n\r\nThis will create verticies named \"parent\" and \"child\" connected with an edge named \"edge\".\r\nWhether this is a bidirectional or unidirectional relationship is determine by the underlying graph database.\r\n\r\nA more complex example:\r\n\r\n```yaml\r\ngraph:\r\n  apple: {growsOn: tree}\r\n  tree: {dependsOn: water, exhale: O2}\r\n  water: {precipitatesAs: [rain, snow, sleet, hail]}\r\n```\r\n\r\n### Entity Properties\r\nThe _optional_ entity sections allow the assignemtn of properties and values to vertices and edges in the graph section.\r\n\r\n```yaml\r\nvertices:\r\n  apple:\r\n    color: red\r\n    weight: 200g \r\n    ripe: yes\r\n\r\nedges:\r\n  dependsOn:\r\n    required: true\r\n```\r\n\r\n## Limitations\r\nGraml currently has the following limitations:\r\n\r\n#### 1. Vertices must be unique\r\nGraml does not support multiple vertices with the same name in accordance with the Yaml specification.\r\n\r\n```yaml\r\ngraph:\r\n  apple: {growsOn: tree}\r\n  apple: {influencedBy: gravity}\r\n```\r\n\r\nThe above will result in an apple vertex with one edge \"gravity\".\r\nFuture versions of Graml will likely detect this and throw an exception.\r\n\r\nIf multiple instances of an apple are desired, they should be created with specific names:\r\n\r\n```yaml\r\nclassmap:\r\n  apple: [myApple, yourApple]\r\n  \r\ngraph:\r\n  myApple: {grownIn: Washington}\r\n  yourApple: {grownIn: Japan}\r\n```\r\n\r\nThe example above uses an apple class to characterize the two apples as a single type.\r\nIf your graph database implementation does not support classes, the same could be done with a \"class\" relationship.\r\n\r\n#### 2. Edge properties are assigned globally\r\n\r\nMultiple edges with the same name may be defined throughout the graph.\r\nHowever, edge properties are assigned globally:\r\n\r\n```yaml\r\nedges:\r\n  grownIn:\r\n    date: October\r\n```\r\n\r\nCarrying forward with the myApple/yourApple example,\r\nthe above edge property would have been applied to the \"grownIn\" edge for both apples.\r\n\r\nThis may be addressed in the future with edge IDs.\r\n\r\n#### 3. Huge Graphs\r\n\r\nGraml's design prioritizes ease-of-use over speed and scale.\r\nIf you have huge graphs, Graml may not be for you.\r\nAt least not yet.\r\n\r\nA future version may incorporate some degree of stream-processing to better handle huge graphs.\r\nThe current implementation expects to process the entire graml file at once which places memory limits on the size of graph. \r\n\r\n## Getting Involved\r\n\r\nContributions welcome!\r\nIf you want to find out how you can get involved, please read the contributing [guidelines](CONTRIBUTING.md).\r\n","google":"UA-42709304-2","note":"Don't delete this file! It's used internally to help with page regeneration."}